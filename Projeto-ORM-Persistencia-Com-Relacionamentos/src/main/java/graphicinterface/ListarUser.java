/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package graphicinterface;

import admin.Admin;
import admin.AdminDao;
import credential.CredentialDao;
import java.time.format.DateTimeFormatter;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import librarian.Librarian;
import librarian.LibrarianDao;
import reader.Reader;
import reader.ReaderDao;
import user.UserDao;

/**
 *
 * @author Claudio Alcantara &lt;claudio.alcantara at ifnmg.edi.br&gt;
 */
public class ListarUser extends javax.swing.JInternalFrame {

    TelaPrincipal telaprincipal;
    private static ListarUser instancia;
    private List<Reader> readers;
    private List<Librarian> librarians;
    private List<Admin> admins;
    DefaultTableModel model;
    boolean fill = false;
    int selectedUser;
    int type;
    /**
     * Creates new form ListarUser
     */
    private ListarUser(int type, TelaPrincipal telaPrincipal) {
        this.telaprincipal = telaPrincipal;
        this.type = type;
        initComponents();
        loadTable();
    }
    
    public static ListarUser getInstance(int type, TelaPrincipal telaPrincipal){
         if (instancia == null) {
            instancia = new ListarUser(type, telaPrincipal);
        }
        return instancia;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblListarUser = new javax.swing.JTable();
        btnListarUserEditar = new javax.swing.JButton();
        btnListarUserCancelar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtListarUserProcurar = new javax.swing.JTextField();
        btnListarUserProcurar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblListarUser.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome de usuário", "Nome", "Data de nascimento", "E-mail"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblListarUser);

        btnListarUserEditar.setText("Editar");
        btnListarUserEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarUserEditarActionPerformed(evt);
            }
        });

        btnListarUserCancelar.setText("Cancelar");
        btnListarUserCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarUserCancelarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        jLabel1.setText("USUÁRIOS");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Procurar por nome de usuário:");

        btnListarUserProcurar.setText("Procurar");
        btnListarUserProcurar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarUserProcurarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnListarUserCancelar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnListarUserEditar)
                .addGap(46, 46, 46))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(390, 390, 390)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtListarUserProcurar, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnListarUserProcurar))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 808, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtListarUserProcurar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnListarUserProcurar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 526, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnListarUserEditar)
                    .addComponent(btnListarUserCancelar))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnListarUserProcurarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarUserProcurarActionPerformed
        switch(type){
            case 0:
                for(Reader reader:readers){
                    if(reader.getCredentical().getUsername().equals(txtListarUserProcurar.getText())){
                        model.setNumRows(0);
                        model.addRow(new Object[]{
                            reader.getCredentical().getUsername(),
                            reader.getName(),
                            reader.getBirthDate().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")),
                            reader.getEmail()
                        });
                        selectedUser = readers.indexOf(reader);
                    }
                    if(txtListarUserProcurar.getText().trim().isEmpty()){
                        loadTable();
                    } 
                }
                break;
            case 1:
                for(Librarian librarian:librarians){
                    if(librarian.getCredentical().getUsername().equals(txtListarUserProcurar.getText())){
                        model.setNumRows(0);
                        model.addRow(new Object[]{
                            librarian.getCredentical().getUsername(),
                            librarian.getName(),
                            librarian.getBirthDate().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")),
                            librarian.getEmail()
                        });
                        selectedUser = librarians.indexOf(librarian);
                    }
                    if(txtListarUserProcurar.getText().trim().isEmpty()){
                        loadTable();
                    } 
                }
                break;
            case 2:
                for(Admin admin : admins){
                    if(admin.getCredentical().getUsername().equals(txtListarUserProcurar.getText())){
                        model.setNumRows(0);
                        model.addRow(new Object[]{
                            admin.getCredentical().getUsername(),
                            admin.getName(),
                            admin.getBirthDate().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")),
                            admin.getEmail()
                        });
                        selectedUser = admins.indexOf(admin);
                    }
                    if(txtListarUserProcurar.getText().trim().isEmpty()){
                        loadTable();
                    } 
                }
                break;
        }
    }//GEN-LAST:event_btnListarUserProcurarActionPerformed

    private void btnListarUserCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarUserCancelarActionPerformed
        dispose();
        instancia = null;
    }//GEN-LAST:event_btnListarUserCancelarActionPerformed

    private void btnListarUserEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarUserEditarActionPerformed
        CadastrarAtualizarUser cadastrarAtualizarUser;
        switch(type){
            case 0:
                if(tblListarUser.getRowCount()!=1)
                    cadastrarAtualizarUser = CadastrarAtualizarUser.getInstance(0, (Object) readers.get(tblListarUser.getSelectedRow()));
                else 
                    cadastrarAtualizarUser = CadastrarAtualizarUser.getInstance(0, (Object) readers.get(selectedUser));
                break;
            case 1:
                if(tblListarUser.getRowCount()!=1)
                    cadastrarAtualizarUser = CadastrarAtualizarUser.getInstance(1, (Object) librarians.get(tblListarUser.getSelectedRow()));
                else 
                    cadastrarAtualizarUser = CadastrarAtualizarUser.getInstance(1, (Object) librarians.get(selectedUser));
                break;
            default:
                if(tblListarUser.getRowCount()!=1)
                    cadastrarAtualizarUser = CadastrarAtualizarUser.getInstance(2, (Object) admins.get(tblListarUser.getSelectedRow()));
                else 
                    cadastrarAtualizarUser = CadastrarAtualizarUser.getInstance(2, (Object) admins.get(selectedUser));
                break;
        }
        telaprincipal.getPrincipalPnl().add(cadastrarAtualizarUser);
        cadastrarAtualizarUser.setVisible(true);
        cadastrarAtualizarUser.toFront();
    }//GEN-LAST:event_btnListarUserEditarActionPerformed

    private void loadTable(){
        Long auxId;
        switch(type){
            case 0:
                if(!fill)
                    readers = new ReaderDao().findAll();
                model = (DefaultTableModel) tblListarUser.getModel();
                model.setNumRows(0);
                for(int i = 0; i<readers.size();i++){
                    if(!fill){
                        auxId = readers.get(i).getId();
                        readers.set(i, new Reader(new UserDao().findById(readers.get(i).getId())));
                        readers.get(i).setId(auxId);
                        auxId = new CredentialDao().findIdbyUser(readers.get(i).getId());
                        readers.get(i).setCredential(new CredentialDao().findById(auxId));
                        readers.get(i).getCredentical().setId(auxId);
                    }
                    model.addRow(new Object[]{
                        readers.get(i).getCredentical().getUsername(),
                        readers.get(i).getName(),
                        readers.get(i).getBirthDate().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")),
                        readers.get(i).getEmail()
                    });
                }
                break;
            case 1:
                if(!fill)
                    librarians = new LibrarianDao().findAll();
                model = (DefaultTableModel) tblListarUser.getModel();
                model.setNumRows(0);
                for(int i = 0; i<librarians.size();i++){
                    if(!fill){
                        auxId = librarians.get(i).getId();
                        librarians.set(i, new Librarian(new UserDao().findById(librarians.get(i).getId())));
                        librarians.get(i).setId(auxId);
                        auxId = new CredentialDao().findIdbyUser(librarians.get(i).getId());
                        librarians.get(i).setCredential(new CredentialDao().findById(auxId));
                        librarians.get(i).getCredentical().setId(auxId);
                    }
                    model.addRow(new Object[]{
                        librarians.get(i).getCredentical().getUsername(),
                        librarians.get(i).getName(),
                        librarians.get(i).getBirthDate().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")),
                        librarians.get(i).getEmail()
                    });
                }
                break;
            case 2:
                if(!fill)
                    admins = new AdminDao().findAll();
                model = (DefaultTableModel) tblListarUser.getModel();
                model.setNumRows(0);
                for(int i = 0; i<admins.size();i++){
                    if(!fill){
                        auxId = admins.get(i).getId();
                        admins.set(i, new Admin(new UserDao().findById(admins.get(i).getId())));
                        admins.get(i).setId(auxId);
                        auxId = new CredentialDao().findIdbyUser(admins.get(i).getId());
                        admins.get(i).setCredential(new CredentialDao().findById(auxId));
                        admins.get(i).getCredentical().setId(auxId);
                    }
                    model.addRow(new Object[]{
                        admins.get(i).getCredentical().getUsername(),
                        admins.get(i).getName(),
                        admins.get(i).getBirthDate().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")),
                        admins.get(i).getEmail()
                    });
                }
                break;
        }
        fill=true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnListarUserCancelar;
    private javax.swing.JButton btnListarUserEditar;
    private javax.swing.JButton btnListarUserProcurar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblListarUser;
    private javax.swing.JTextField txtListarUserProcurar;
    // End of variables declaration//GEN-END:variables
}
