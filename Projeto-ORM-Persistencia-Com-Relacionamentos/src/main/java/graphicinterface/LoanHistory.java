/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package graphicinterface;

import copy.CopyDao;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import librarian.Librarian;
import loan.Loan;
import loan.LoanDao;
import reader.Reader;
import reader.ReaderDao;
import user.User;
import user.UserDao;

/**
 *
 * @author Claudio Alcantara &lt;claudio.alcantara at ifnmg.edi.br&gt;
 */
public class LoanHistory extends javax.swing.JInternalFrame {
    private static LoanHistory instancia;
    private User user;
    boolean fill = false;
    private DefaultTableModel model;
    private List<Loan> loans;
    
    /**
     * Creates new form LoanHistory
     */
    private LoanHistory(User user, int type) {
        this.user = user;
        initComponents();
        if(type == 0)
            btnLoanHistDevolver.setVisible(false);
        loadTable();
        
    }
    
    public static LoanHistory getInstace(User user, int type){
        if (instancia == null) {
            instancia = new LoanHistory(user, type);
        }
        return instancia;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblLoanHystory = new javax.swing.JTable();
        btnLoanHistFechar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtLoanHistProcurar = new javax.swing.JTextField();
        lblLoanHistProc = new javax.swing.JLabel();
        btnLoanHistProcurar = new javax.swing.JButton();
        btnLoanHistDevolver = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblLoanHystory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Data do emprestimo", "Data de devolução", "Título", "Autores", "Páginas", "Ano", "Edição", "Condição", "Bibliotecario"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblLoanHystory);

        btnLoanHistFechar.setText("Fechar");
        btnLoanHistFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoanHistFecharActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        jLabel1.setText("HISTÓRICO DE EMPRESTIMOS");

        lblLoanHistProc.setText("Usuario do leitor:");

        btnLoanHistProcurar.setText("Procurar");
        btnLoanHistProcurar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoanHistProcurarActionPerformed(evt);
            }
        });

        btnLoanHistDevolver.setText("Devolver");
        btnLoanHistDevolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoanHistDevolverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnLoanHistDevolver)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLoanHistFechar)
                .addGap(61, 61, 61))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblLoanHistProc)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtLoanHistProcurar, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLoanHistProcurar))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(35, 35, 35)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 705, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(232, 232, 232)
                            .addComponent(jLabel1))))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jLabel1)
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtLoanHistProcurar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLoanHistProc)
                    .addComponent(btnLoanHistProcurar))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 541, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLoanHistFechar)
                    .addComponent(btnLoanHistDevolver))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoanHistFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoanHistFecharActionPerformed
        dispose();
        instancia = null;
    }//GEN-LAST:event_btnLoanHistFecharActionPerformed

    private void btnLoanHistProcurarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoanHistProcurarActionPerformed
        for(Loan loan:loans){
           if(loan.getReader().getCredentical().getUsername().equals(txtLoanHistProcurar.getText())){
               model.setNumRows(0);
               model.addRow(new Object[]{
                    loan.getDataDoEmprestimo().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")),
                    (loan.getDataDaDevolução() == null) ? loan.getDataDaDevolução().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")) : null,
                    loan.getCopy().getBook().getTitle(),
                    loan.getCopy().getBook().getAuthors(),
                    loan.getCopy().getBook().getPages(),
                    loan.getCopy().getBook().getYear(),
                    loan.getCopy().getBook().getEdition(),
                    loan.getCopy().getCondition(),
                    loan.getLibrarian().getName()
                });
           }
           if(txtLoanHistProcurar.getText().trim().isEmpty())
               loadTable();
        }
    }//GEN-LAST:event_btnLoanHistProcurarActionPerformed

    private void btnLoanHistDevolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoanHistDevolverActionPerformed
        if(loans.get(tblLoanHystory.getSelectedRow()).getDataDaDevolução() == null){
            loans.get(tblLoanHystory.getSelectedRow()).setDataDaDevolução(LocalDate.now());
            loans.get(tblLoanHystory.getSelectedRow()).getCopy().setAvailable(true);
            loans.get(tblLoanHystory.getSelectedRow()).getReader().setQtdEmpretimos(loans.get(tblLoanHystory.getSelectedRow()).getReader().getQtdEmpretimos()-1);
            new LoanDao().saveOrUpdate(loans.get(tblLoanHystory.getSelectedRow()));
            new CopyDao().saveOrUpdate(loans.get(tblLoanHystory.getSelectedRow()).getCopy());
            new ReaderDao().saveOrUpdate(loans.get(tblLoanHystory.getSelectedRow()).getReader());
            btnLoanHistDevolver.setEnabled(false);
        }
    }//GEN-LAST:event_btnLoanHistDevolverActionPerformed
    
    private void loadTable(){
        Reader reader = new ReaderDao().findById(user.getId());
        if(!fill)
            loans = new LoanDao().findAll();
        model = (DefaultTableModel) tblLoanHystory.getModel();
        model.setNumRows(0);
        for(int i =0; i<loans.size();i++){
            Long aux = loans.get(i).getReader().getId();
            loans.get(i).setReader(new Reader(new UserDao().findById(loans.get(i).getReader().getId())));
            loans.get(i).getReader().setId(aux);
            aux = loans.get(i).getLibrarian().getId();
            loans.get(i).setLibrarian(new Librarian(new UserDao().findById(loans.get(i).getLibrarian().getId())));
            loans.get(i).getLibrarian().setId(aux);
            loans.get(i).setCopy(new CopyDao().findById(loans.get(i).getCopy().getId()));
        }
        if(reader!= null){
            txtLoanHistProcurar.setVisible(false);
            btnLoanHistProcurar.setVisible(false);
            lblLoanHistProc.setVisible(false);
            for(int i =0; i<loans.size();i++){
                if(loans.get(i).getReader().getId().equals(user.getId())){
                    model.addRow(new Object[]{
                    loans.get(i).getDataDoEmprestimo().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")),
                    (loans.get(i).getDataDaDevolução() != null) ? loans.get(i).getDataDaDevolução().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")) : null,
                    loans.get(i).getCopy().getBook().getTitle(),
                    loans.get(i).getCopy().getBook().getAuthors(),
                    loans.get(i).getCopy().getBook().getPages(),
                    loans.get(i).getCopy().getBook().getYear(),
                    loans.get(i).getCopy().getBook().getEdition(),
                    loans.get(i).getCopy().getCondition(),
                    loans.get(i).getLibrarian().getName()
                });
                }
            }
        }else{
            for(int i =0; i<loans.size();i++){
                model.addRow(new Object[]{
                    loans.get(i).getDataDoEmprestimo().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")),
                    (loans.get(i).getDataDaDevolução() != null) ? loans.get(i).getDataDaDevolução().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")) : null,
                    loans.get(i).getCopy().getBook().getTitle(),
                    loans.get(i).getCopy().getBook().getAuthors(),
                    loans.get(i).getCopy().getBook().getPages(),
                    loans.get(i).getCopy().getBook().getYear(),
                    loans.get(i).getCopy().getBook().getEdition(),
                    loans.get(i).getCopy().getCondition(),
                    loans.get(i).getLibrarian().getName()
                });
            }
        }
        fill=true;
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLoanHistDevolver;
    private javax.swing.JButton btnLoanHistFechar;
    private javax.swing.JButton btnLoanHistProcurar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblLoanHistProc;
    private javax.swing.JTable tblLoanHystory;
    private javax.swing.JTextField txtLoanHistProcurar;
    // End of variables declaration//GEN-END:variables
}
